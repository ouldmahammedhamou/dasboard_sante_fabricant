"""
Module principal du tableau de bord - Cr√©ation d'un tableau de bord interactif avec Streamlit
"""
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import sys
import os
import time

# Ajoute le r√©pertoire src au chemin Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importe les modules personnalis√©s
from data_fetcher import DataFetcher
from data_processor import DataProcessor

# Configuration de la page
st.set_page_config(
    page_title="Tableau de Bord - Sant√© des Fabricants",
    page_icon="üìä",
    layout="wide"
)

# Titre du tableau de bord
st.title("üìä Tableau de Bord - Sant√© des Fabricants sur le March√©")

# Description du tableau de bord
st.markdown("""
Ce tableau de bord pr√©sente les indicateurs de sant√© des fabricants sur le march√© pour diff√©rentes cat√©gories de produits.
En analysant les indicateurs de performance cl√©s (KPIs), vous pouvez comprendre la position de leadership des fabricants sur le march√©.
""")

# Initialise le r√©cup√©rateur de donn√©es et le processeur
@st.cache_resource
def initialize_data_processor():
    """Initialise le processeur de donn√©es et le r√©cup√©rateur"""
    # Cr√©e le r√©cup√©rateur et le processeur
    fetcher = DataFetcher()
    processor = DataProcessor()
    return fetcher, processor

fetcher, processor = initialize_data_processor()

# Cr√©e le r√©pertoire cache s'il n'existe pas
if not os.path.exists("cache"):
    os.makedirs("cache")

# Filtres de la barre lat√©rale
st.sidebar.header("Filtres")

# Ajoute un s√©lecteur de source de donn√©es
data_source = st.sidebar.radio(
    "Source de donn√©es",
    options=["Donn√©es en cache", "Donn√©es des fichiers de test", "Donn√©es API en temps r√©el"],
    index=0
)

# Ajoute un bouton de rafra√Æchissement des donn√©es
if st.sidebar.button("üîÑ Rafra√Æchir les donn√©es"):
    # Efface le cache et red√©marre l'application
    st.cache_data.clear()
    st.rerun()

# Fonction pour charger les donn√©es depuis l'API
def load_data_from_api():
    """
    Charge les donn√©es directement depuis l'API
    
    Retourne:
        Tuple contenant les DataFrames des produits et des accords de vente
    """
    try:
        st.sidebar.info("‚è≥ Chargement des donn√©es depuis l'API en cours...")
        
        # R√©cup√©rer un nombre limit√© de logs pour la d√©monstration
        product_logs = fetcher.get_multiple_product_logs(1, 1000000)
        sale_logs = fetcher.get_multiple_sale_logs(1, 1000000)
        
        if not product_logs or not sale_logs:
            st.sidebar.warning("‚ö†Ô∏è Aucune donn√©e trouv√©e dans l'API, utilisation des donn√©es d'exemple.")
            return None, None
            
        # Convertir les logs en DataFrames
        product_df = fetcher.convert_logs_to_dataframe(product_logs, 'product')
        sale_df = fetcher.convert_logs_to_dataframe(sale_logs, 'sale')
        
        st.sidebar.success("‚úÖ Donn√©es charg√©es depuis l'API")
        return product_df, sale_df
    except Exception as e:
        st.sidebar.error(f"‚ùå Erreur lors du chargement depuis l'API: {e}")
        return None, None

# Charge des donn√©es avec strat√©gie de cache
@st.cache_data(ttl=3600)  # Cache pendant une heure
def load_data_with_cache():
    """
    Charge les donn√©es avec une strat√©gie de cache multi-niveaux:
    1. Essaie de charger depuis l'API
    2. Essaie de charger depuis le cache fichier
    3. Essaie de charger depuis les fichiers de test
    4. G√©n√®re des donn√©es d'exemple en cas d'√©chec
    
    Retourne:
        Tuple contenant les DataFrames des produits et des accords de vente
    """
    # 1. Essaie de charger depuis l'API
    try:
        st.sidebar.info("‚è≥ Tentative de chargement depuis l'API...")
        
        # R√©cup√©rer des logs (augmenter la plage pour plus de donn√©es)
        product_logs = fetcher.get_multiple_product_logs(1, 1000000)
        sale_logs = fetcher.get_multiple_sale_logs(1, 1000000)
        
        if product_logs and sale_logs:
            # Convertir les logs en DataFrames
            product_df = fetcher.convert_logs_to_dataframe(product_logs, 'product')
            sale_df = fetcher.convert_logs_to_dataframe(sale_logs, 'sale')
            
            # Sauvegarder dans le cache pour une utilisation future
            cache_dir = "cache"
            if not os.path.exists(cache_dir):
                os.makedirs(cache_dir)
                
            product_cache = f"{cache_dir}/product_data.csv"
            sale_cache = f"{cache_dir}/sale_data.csv"
            
            fetcher.save_data_to_cache(product_df, product_cache)
            fetcher.save_data_to_cache(sale_df, sale_cache)
            
            st.sidebar.success("‚úÖ Donn√©es charg√©es depuis l'API et mises en cache")
            return product_df, sale_df
    except Exception as e:
        st.sidebar.warning(f"‚ö†Ô∏è Impossible de charger depuis l'API: {e}")
    
    # 2. Essaie de charger depuis le cache fichier
    try:
        cache_dir = "cache"
        product_cache = f"{cache_dir}/product_data.csv"
        sale_cache = f"{cache_dir}/sale_data.csv"
        
        product_df = fetcher.load_data_from_cache(product_cache)
        sale_df = fetcher.load_data_from_cache(sale_cache)
        
        if product_df is not None and sale_df is not None:
            st.sidebar.success("‚úÖ Donn√©es charg√©es depuis le cache")
            return product_df, sale_df
    except Exception as e:
        st.sidebar.info(f"‚ö†Ô∏è Impossible de charger depuis le cache: {e}")
    
    # 3. Essaie de charger depuis les fichiers de test
    try:
        product_file_path = "data_test/produits-tous/produits-tous.orig"
        sale_file_path = "data_test/pointsDeVente-tous/pointsDeVente-tous"
        
        if os.path.exists(product_file_path) and os.path.exists(sale_file_path):
            product_df = fetcher.load_test_data_from_text_file(product_file_path, 'product')
            sale_df = fetcher.load_test_data_from_text_file(sale_file_path, 'sale')
            
            # Sauvegarde dans le cache
            cache_dir = "cache"
            if not os.path.exists(cache_dir):
                os.makedirs(cache_dir)
                
            product_cache = f"{cache_dir}/product_data.csv"
            sale_cache = f"{cache_dir}/sale_data.csv"
            
            fetcher.save_data_to_cache(product_df, product_cache)
            fetcher.save_data_to_cache(sale_df, sale_cache)
            
            st.sidebar.success("‚úÖ Donn√©es charg√©es depuis les fichiers de test et mises en cache")
            return product_df, sale_df
    except Exception as e:
        st.sidebar.info(f"‚ö†Ô∏è Impossible de charger depuis les fichiers de test: {e}")
    
    # 4. G√©n√®re des donn√©es d'exemple
    st.sidebar.warning("‚ö†Ô∏è Utilisation des donn√©es d'exemple g√©n√©r√©es")
    
    # D√©finir des cat√©gories r√©alistes
    categories = [1, 2, 3, 4, 5]  # Cat√©gories de 1 √† 5
    n_records = 1000  # Plus de donn√©es pour un meilleur exemple
    
    # Donn√©es d'exemple g√©n√©r√©es
    product_data = {
        'logID': list(range(1, n_records + 1)),
        'prodID': list(range(101, n_records + 101)),
        'catID': np.random.choice(categories, n_records),
        'fabID': np.random.choice(list(range(1, 21)), n_records),
        'dateID': np.random.choice(list(range(1, 366)), n_records)
    }
    
    # Donn√©es d'exemple pour les accords de vente
    sale_data = {
        'logID': list(range(1, n_records + 1)),
        'prodID': list(range(101, n_records + 101)),
        'catID': np.random.choice(categories, n_records),  # Utiliser les m√™mes cat√©gories
        'fabID': np.random.choice(list(range(1, 21)), n_records),
        'magID': np.random.choice(list(range(1, 31)), n_records),  # 30 magasins
        'dateID': np.random.choice(list(range(1, 366)), n_records)
    }
    
    product_df = pd.DataFrame(product_data)
    sale_df = pd.DataFrame(sale_data)
    
    return product_df, sale_df

# Charge les donn√©es en fonction de la source s√©lectionn√©e
if data_source == "Donn√©es API en temps r√©el":
    product_df, sale_df = load_data_from_api()
    if product_df is None or sale_df is None:
        # Si l'API √©choue, utiliser les donn√©es mises en cache
        product_df, sale_df = load_data_with_cache()
elif data_source == "Donn√©es des fichiers de test":
    try:
        product_file_path = "data_test/produits-tous/produits-tous.orig"
        sale_file_path = "data_test/pointsDeVente-tous/pointsDeVente-tous"
        
        if os.path.exists(product_file_path) and os.path.exists(sale_file_path):
            product_df = fetcher.load_test_data_from_text_file(product_file_path, 'product')
            sale_df = fetcher.load_test_data_from_text_file(sale_file_path, 'sale')
            st.sidebar.success("‚úÖ Donn√©es charg√©es depuis les fichiers de test")
        else:
            st.sidebar.warning("‚ö†Ô∏è Fichiers de test non trouv√©s, utilisation des donn√©es en cache")
            product_df, sale_df = load_data_with_cache()
    except Exception as e:
        st.sidebar.error(f"‚ùå Erreur lors du chargement depuis les fichiers de test: {e}")
        product_df, sale_df = load_data_with_cache()
else:
    # Par d√©faut, charger les donn√©es mises en cache
    product_df, sale_df = load_data_with_cache()

# Mettre √† jour le processeur avec les nouvelles donn√©es
processor.set_dataframes(product_df, sale_df)

# Ajoute un s√©lecteur d'ID de fabricant dans la barre lat√©rale
manufacturer_id = st.sidebar.number_input("ID du Fabricant", min_value=1, max_value=1000000, value=1664)

# Ajoute un s√©lecteur de cat√©gorie
st.sidebar.write("\n**Cat√©gories Disponibles:**")
available_categories = sorted(product_df['catID'].unique())

if len(available_categories) == 0:
    st.error("‚ùå Aucune cat√©gorie trouv√©e dans les donn√©es.")
else:
    # Afficher un r√©sum√© des donn√©es
    st.sidebar.write("üìä **R√©sum√© des Donn√©es:**")
    total_products = len(product_df)
    total_sales = len(sale_df)
    st.sidebar.write(f"Nombre total de produits: {total_products}")
    st.sidebar.write(f"Nombre total d'accords de vente: {total_sales}")
    
    # Afficher les statistiques par cat√©gorie
    st.sidebar.write("\n**Statistiques par Cat√©gorie:**")
    category_counts = {}
    for cat in available_categories:
        products_in_cat = len(product_df[product_df['catID'] == cat])
        sales_in_cat = len(sale_df[sale_df['catID'] == cat])
        category_counts[cat] = sales_in_cat
        st.sidebar.write(f"Cat√©gorie {cat}:")
        st.sidebar.write(f"  - Produits: {products_in_cat}")
        st.sidebar.write(f"  - Accords de vente: {sales_in_cat}")

    # S√©lectionner la cat√©gorie avec le plus d'accords de vente comme d√©faut
    default_category = max(category_counts.items(), key=lambda x: x[1])[0]
    category_id = st.sidebar.selectbox(
        "Cat√©gorie de Produit",
        options=available_categories,
        index=available_categories.index(default_category),
        help="S√©lectionnez une cat√©gorie de produit parmi celles disponibles"
    )

    # V√©rifier si la cat√©gorie s√©lectionn√©e a des donn√©es
    if category_counts[category_id] == 0:
        st.warning(f"‚ö†Ô∏è Attention: La cat√©gorie {category_id} n'a aucun accord de vente. Veuillez s√©lectionner une autre cat√©gorie.")

# Ajoute un s√©lecteur de plage de dates
start_date = datetime(2022, 1, 1)
end_date = datetime(2022, 12, 31)
date_range = st.sidebar.date_input(
    "Plage de Dates",
    value=(start_date, end_date),
    min_value=start_date,
    max_value=end_date
)

# Si l'utilisateur a s√©lectionn√© une date, la convertit en un tuple contenant les dates de d√©but et de fin
if isinstance(date_range, tuple) and len(date_range) == 2:
    selected_start_date, selected_end_date = date_range
else:
    selected_start_date, selected_end_date = start_date, end_date

# Indicateurs KPI principaux
st.header("Indicateurs de Performance Cl√©s (KPIs)")

# Cr√©e une mise en page √† trois colonnes pour afficher les KPI
col1, col2, col3 = st.columns(3)

with col1:
    # Calcule le nombre d'acteurs du march√© pour la cat√©gorie s√©lectionn√©e
    actor_count = processor.count_market_actors_by_category(category_id)
    st.metric(
        label=f"Nombre d'Acteurs du March√© - Cat√©gorie {category_id}",
        value=f"{actor_count}",
        delta=None,
        delta_color="normal"
    )

with col2:
    # Calcule le nombre moyen de produits par fabricant pour la cat√©gorie 5
    avg_products = processor.avg_products_per_manufacturer_by_category(category_id)
    # Ajouter des informations de d√©bogage
    st.sidebar.write(f"**D√©bogage moyenne produits (cat√©gorie {category_id}):**")
    category_products = processor.product_df[processor.product_df['catID'] == category_id]
    st.sidebar.write(f"Nombre de produits dans cat√©gorie {category_id}: {len(category_products)}")
    products_per_manufacturer = category_products.groupby('fabID')['prodID'].nunique()
    st.sidebar.write(f"Nombre de fabricants: {len(products_per_manufacturer)}")
    st.sidebar.write(f"Nombre moyen calcul√©: {products_per_manufacturer.mean()}")
    
    st.metric(
        label=f"Nombre Moyen de Produits/Fabricant - Cat√©gorie {category_id}",
        value=f"{avg_products:.2f}",
        delta="-0.5 par rapport au mois dernier",  # Dans une application r√©elle, cela serait calcul√©
        delta_color="normal"
    )

with col3:
    # V√©rifier si nous avons des donn√©es pour cette cat√©gorie
    category_sales = processor.sale_df[processor.sale_df['catID'] == category_id]
    manufacturer_products = processor.product_df[
        (processor.product_df['catID'] == category_id) & 
        (processor.product_df['fabID'] == manufacturer_id)
    ]
    
    # Ajouter des prints pour le d√©bogage
    print(f"\n=== D√©tails du Score de Sant√© ===")
    print(f"Fabricant ID: {manufacturer_id}")
    print(f"Cat√©gorie ID: {category_id}")
    print(f"Nombre d'accords de vente dans la cat√©gorie: {len(category_sales)}")
    print(f"Nombre de produits du fabricant: {len(manufacturer_products)}")
    
    if len(category_sales) == 0:
        print("‚ùå Aucun accord de vente trouv√© pour cette cat√©gorie")
        st.error(f"‚ùå Aucun accord de vente trouv√© pour la cat√©gorie {category_id}")
        health_score = 0.0
    elif len(manufacturer_products) == 0:
        print(f"‚ö†Ô∏è Le fabricant {manufacturer_id} n'a pas de produits dans la cat√©gorie {category_id}")
        st.warning(f"‚ö†Ô∏è Le fabricant {manufacturer_id} n'a pas de produits dans la cat√©gorie {category_id}")
        health_score = 0.0
    else:
        # Calcule le score de sant√© du fabricant
        health_score = processor.manufacturer_health_score(manufacturer_id, category_id)
        print(f"Score de Sant√© calcul√©: {health_score:.2%}")
    
    st.metric(
        label=f"Score de Sant√© du Fabricant {manufacturer_id}",
        value=f"{health_score:.2%}",
        delta=None,
        delta_color="normal"
    )

# Affiche les 10 premiers magasins
st.header(f"Top 10 des Magasins")
top_stores = processor.top_stores(10)

# Forcer le vidage du buffer et ajouter des s√©parateurs visuels
print("\n" + "="*80)
print("üèÜ TOP 10 DES MAGASINS PAR NOMBRE D'ACCORDS DE VENTE".center(80))
print("="*80 + "\n")

# Statistiques globales
total_stores = processor.sale_df['magID'].nunique()
total_agreements = len(processor.sale_df)
store_counts = processor.sale_df['magID'].value_counts().head(10)

print("üìä STATISTIQUES GLOBALES:")
print(f"- Nombre total de magasins: {total_stores}")
print(f"- Nombre total d'accords de vente: {total_agreements}\n")

# En-t√™te du tableau
print("üìà CLASSEMENT D√âTAILL√â:")
print("-"*80)
print(f"| {'RANG':^6} | {'MAGASIN ID':^12} | {'ACCORDS':^12} | {'% DU TOTAL':^15} | {'CUMUL %':^15} |")
print("-"*80)

# Afficher chaque magasin avec des statistiques cumulatives
cumulative_percentage = 0
for rank, (magID, count) in enumerate(store_counts.items(), 1):
    percentage = (count / total_agreements) * 100
    cumulative_percentage += percentage
    print(f"| {rank:^6d} | {magID:^12d} | {count:^12d} | {percentage:^15.2f} | {cumulative_percentage:^15.2f} |")
    sys.stdout.flush()
    time.sleep(0.1)  # Petit d√©lai pour assurer l'affichage

print("-"*80)
print(f"\nLes top 10 magasins repr√©sentent {cumulative_percentage:.2f}% du total des accords de vente")
print("="*80 + "\n")
sys.stdout.flush()

# Cr√©e un graphique √† barres
fig_stores = px.bar(
    top_stores, 
    x='magID', 
    y='agreement_count',
    title=f"Top 10 des Magasins (par nombre d'accords de vente)",
    labels={"magID": "ID du Magasin", "agreement_count": "Nombre d'Accords de Vente"},
    color='agreement_count',
    color_continuous_scale='Viridis'
)
st.plotly_chart(fig_stores, use_container_width=True)

# Cr√©e une mise en page √† deux colonnes
col1, col2 = st.columns(2)

with col1:
    # Cr√©e un graphique d'√©volution du nombre d'acteurs du march√© au fil du temps (donn√©es simul√©es)
    st.subheader(f"√âvolution du Nombre d'Acteurs du March√© - Cat√©gorie {category_id}")
    
    # Donn√©es mensuelles simul√©es
    months = ['Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 
              'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre']
    # Donn√©es simul√©es, seraient obtenues du processeur dans une application r√©elle
    actor_counts = np.random.randint(15, 25, size=12)
    
    # Cr√©e un graphique lin√©aire
    fig_actors = px.line(
        x=months, 
        y=actor_counts,
        markers=True,
        title=f"Tendance du Nombre d'Acteurs du March√© - Cat√©gorie {category_id} (2022)",
        labels={"x": "Mois", "y": "Nombre d'Acteurs"}
    )
    st.plotly_chart(fig_actors, use_container_width=True)

with col2:
    # Cr√©e un graphique d'√©volution du score de sant√© du fabricant au fil du temps (donn√©es simul√©es)
    st.subheader(f"√âvolution du Score de Sant√© du Fabricant {manufacturer_id}")
    
    # Donn√©es simul√©es, seraient obtenues du processeur dans une application r√©elle
    health_scores = np.random.uniform(0.1, 0.3, size=12)
    
    # Cr√©e un graphique lin√©aire
    fig_health = px.line(
        x=months, 
        y=health_scores,
        markers=True,
        title=f"Tendance du Score de Sant√© du Fabricant {manufacturer_id} (2022)",
        labels={"x": "Mois", "y": "Score de Sant√©"}
    )
    fig_health.update_layout(yaxis_tickformat='.1%')
    st.plotly_chart(fig_health, use_container_width=True)

# Affiche des tableaux de donn√©es (repliables)
with st.expander("Voir les Donn√©es Brutes"):
    tab1, tab2 = st.tabs(["Donn√©es des Produits", "Donn√©es des Accords de Vente"])
    
    with tab1:
        st.dataframe(product_df.head(50))
    
    with tab2:
        st.dataframe(sale_df.head(50))

# Ajoute des annotations et des explications
st.markdown("""
### Explication des KPI

1. **Nombre d'Acteurs du March√©**: Nombre de fabricants actifs sur le march√© pour une cat√©gorie de produit sp√©cifique.
2. **Nombre Moyen de Produits/Fabricant**: Nombre moyen de produits qu'un fabricant propose dans une cat√©gorie sp√©cifique.
3. **Score de Sant√© du Fabricant**: Proportion moyenne des produits d'un fabricant parmi tous les produits d'une cat√©gorie dans les 10 premiers magasins.

### Source des Donn√©es
- Donn√©es provenant de l'API distante: http://51.255.166.155:1353/
- P√©riode d'analyse: 1er janvier 2022 au 31 d√©cembre 2022
""")

# Ajoute un pied de page
st.markdown("---")
st.markdown("¬© 2025 Projet d'Analyse de la Sant√© des Fabricants sur le March√© | Auteur: XXX")